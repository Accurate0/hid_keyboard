diff --git a/keyboards/gmmk/pro/config.h b/keyboards/gmmk/pro/config.h
index 64062bece..c98200415 100644
--- a/keyboards/gmmk/pro/config.h
+++ b/keyboards/gmmk/pro/config.h
@@ -62,4 +62,3 @@
 #define DRIVER_1_LED_TOTAL 66
 #define DRIVER_2_LED_TOTAL 32
 #define DRIVER_LED_TOTAL (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)
-
diff --git a/keyboards/gmmk/pro/keymaps/accurate0/config.h b/keyboards/gmmk/pro/keymaps/accurate0/config.h
new file mode 100644
index 000000000..e715e6aec
--- /dev/null
+++ b/keyboards/gmmk/pro/keymaps/accurate0/config.h
@@ -0,0 +1,9 @@
+#pragma once
+
+#define UNICODE_SELECTED_MODES UC_LNX
+#define DYNAMIC_MACRO_NO_NESTING
+#define FORCE_NKRO
+#define TAP_CODE_DELAY 10
+#define USB_POLLING_INTERVAL_MS 1
+#define RGB_MATRIX_STARTUP_SPD 127
+#define RGB_MATRIX_KEYPRESSES
diff --git a/keyboards/gmmk/pro/keymaps/accurate0/keymap.c b/keyboards/gmmk/pro/keymaps/accurate0/keymap.c
new file mode 100644
index 000000000..a968466b4
--- /dev/null
+++ b/keyboards/gmmk/pro/keymaps/accurate0/keymap.c
@@ -0,0 +1,67 @@
+/* Copyright 2021 Glorious, LLC <salman@pcgamingrace.com>
+
+This program is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 2 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include QMK_KEYBOARD_H
+#include "raw_hid.h"
+#include "print.h"
+#include "accurate0.h"
+
+const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
+
+//      ESC      F1       F2       F3       F4       F5       F6       F7       F8       F9       F10      F11      F12	     Prt           Rotary(Mute)
+//      ~        1        2        3        4        5        6        7        8        9        0         -       (=)	     BackSpc           Del
+//      Tab      Q        W        E        R        T        Y        U        I        O        P        [        ]        \                 PgUp
+//      Caps     A        S        D        F        G        H        J        K        L        ;        "                 Enter             PgDn
+//      Sh_L              Z        X        C        V        B        N        M        ,        .        ?                 Sh_R     Up       End
+//      Ct_L     Win_L    Alt_L                               SPACE                               Alt_R    FN       Ct_R     Left     Down     Right
+
+
+    [LY_BASE] = LAYOUT(
+        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR,          KC_MUTE,
+        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC,          KC_DEL,
+        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC, KC_RBRC, KC_BSLS,          KC_PGUP,
+        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,          KC_ENT,           KC_PGDN,
+        KC_LSFT,          KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,          KC_RSFT, KC_UP,   KC_END,
+        KC_LCTL, KC_LGUI, KC_LALT,                            KC_SPC,                             KC_RALT, KC_RCTL,   MO(1), KC_LEFT, KC_DOWN, KC_RGHT
+    ),
+
+    [LY_FUNC] = LAYOUT(
+        DM_RSTP, DM_REC1, DM_REC2,  KC_SC3,  KC_SC4,  KC_SC5, _______, _______, _______, _______, _______,  KC_F23,  KC_F24, _______,          KC_MPLY,
+        _______, DM_PLY1, DM_PLY2, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______,  KC_WPM,  KC_EMO, KC_FSHS, _______, _______, _______, _______, _______,  KC_SC2, _______, _______, _______,          _______,
+        _______, _______, KC_SLEP, _______,  KC_FSH, _______, _______, _______,  KC_SC1, RGB_TOG, _______, _______,          _______,          _______,
+        _______,          _______, _______,  KC_CAL, _______, _______, _______, _______, _______, _______, _______,          _______, _______, _______,
+        _______, _______, _______,                            _______,                            _______, _______, _______, _______, _______, _______
+    ),
+
+    [2] = LAYOUT(
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,          _______,
+        _______,          _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______, _______, _______,
+        _______, _______, _______,                            _______,                            _______, _______, _______, _______, _______, _______
+    ),
+
+    [3] = LAYOUT(
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,
+        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______,          _______,
+        _______,          _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,          _______, _______, _______,
+        _______, _______, _______,                            _______,                            _______, _______, _______, _______, _______, _______
+    ),
+};
diff --git a/keyboards/gmmk/pro/keymaps/accurate0/rgb_matrix_user.inc b/keyboards/gmmk/pro/keymaps/accurate0/rgb_matrix_user.inc
new file mode 100644
index 000000000..d706372b3
--- /dev/null
+++ b/keyboards/gmmk/pro/keymaps/accurate0/rgb_matrix_user.inc
@@ -0,0 +1,79 @@
+// !!! DO NOT ADD #pragma once !!! //
+
+// Step 1.
+// Declare custom effects using the RGB_MATRIX_EFFECT macro
+// (note the lack of semicolon after the macro!)
+RGB_MATRIX_EFFECT(REACTIVE)
+// Step 2.
+// Define effects inside the `RGB_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block
+#ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
+
+extern uint8_t volume;
+
+static HSV REACTIVE_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
+    uint16_t effect = tick + dist;
+    dx              = dx < 0 ? dx * -1 : dx;
+    dy              = dy < 0 ? dy * -1 : dy;
+    dx              = dx * 16 > 255 ? 255 : dx * 16;
+    dy              = dy * 16 > 255 ? 255 : dy * 16;
+    effect += dx > dy ? dy : dx;
+    if (effect > 255) effect = 255;
+    hsv.v = qadd8(hsv.v, 255 - effect);
+    return hsv;
+}
+
+typedef HSV (*reactive_splash_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick);
+
+bool REACTIVE_effect_runner(uint8_t start, effect_params_t* params, reactive_splash_f effect_func) {
+    RGB_MATRIX_USE_LIMITS(led_min, led_max);
+
+    uint8_t count = g_last_hit_tracker.count;
+    // left side light
+    for (uint8_t i = 82; i < 90; i++) {
+        RGB_MATRIX_TEST_LED_FLAGS();
+        HSV hsv = { 9, 150, 0 };
+         for (uint8_t j = start; j < count; j++) {
+            int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
+            int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
+            // uint8_t  dist = sqrt16(dx * dx + dy * dy);
+            uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
+            hsv           = effect_func(hsv, dx, dy, 0, tick);
+        }
+        hsv.v   = scale8(hsv.v, 255);
+        RGB rgb = rgb_matrix_hsv_to_rgb(hsv);
+        rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
+    }
+
+    uint32_t total_count = volume * 20;
+    // right side
+    for (uint8_t i = 97; i >= 90; i--) {
+        if(total_count < 0) {
+            rgb_matrix_set_color(i, RGB_BLACK);
+            continue;
+        }
+
+        uint8_t value = 0;
+        if(total_count > 255) {
+            value = 255;
+        } else {
+            value = total_count;
+        }
+
+        HSV hsv = { 9, 150, value };
+        RGB rgb = rgb_matrix_hsv_to_rgb(hsv);
+        rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
+
+        total_count -= value;
+    }
+
+    return led_max < DRIVER_LED_TOTAL;
+}
+
+// e.g: A simple effect, self-contained within a single method
+bool REACTIVE(effect_params_t* params) {
+    return REACTIVE_effect_runner(qsub8(g_last_hit_tracker.count, 1), params, &REACTIVE_math);
+}
+
+#endif // RGB_MATRIX_CUSTOM_EFFECT_IMPLS
+
+#define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_CUSTOM_REACTIVE
diff --git a/keyboards/gmmk/pro/keymaps/accurate0/rules.mk b/keyboards/gmmk/pro/keymaps/accurate0/rules.mk
new file mode 100644
index 000000000..a01eaaae4
--- /dev/null
+++ b/keyboards/gmmk/pro/keymaps/accurate0/rules.mk
@@ -0,0 +1,8 @@
+# VIA_ENABLE = yes
+LTO_ENABLE = yes
+MOUSEKEY_ENABLE = no
+DYNAMIC_MACRO_ENABLE = yes
+COMMAND_ENABLE = yes
+CONSOLE_ENABLE = yes
+RGB_MATRIX_CUSTOM_USER = yes
+RAW_ENABLE = yes
diff --git a/keyboards/gmmk/pro/pro.c b/keyboards/gmmk/pro/pro.c
index 9ed7ac886..e40124936 100644
--- a/keyboards/gmmk/pro/pro.c
+++ b/keyboards/gmmk/pro/pro.c
@@ -17,222 +17,172 @@
 
 #ifdef RGB_MATRIX_ENABLE
 led_config_t g_led_config = { {
-    { 4,      NO_LED, NO_LED, 95,     65,     79, 5,      28 },
-    { 8,      2,      9,      0,      10,     75, 1,      7  },
-    { 14,     3,      15,     NO_LED, 16,     86, 6,      13 },
-    { 20,     18,     21,     23,     22,     94, 12,     19 },
-    { 25,     30,     26,     31,     27,     32, 29,     24 },
-    { 41,     36,     42,     37,     43,     38, 35,     40 },
-    { 46,     89,     47,     34,     48,     72, 78,     45 },
-    { 52,     39,     53,     97,     54,     82, 44,     51 },
-    { 58,     63,     59,     64,     NO_LED, 60, 62,     57 },
-    { 11,     90,     55,     17,     33,     49, NO_LED, 69 },
-    { NO_LED, 85,     93,     61,     96,     66, 50,     56 }
+    //R0      R1      R2      R3      R4      R5  R6      R7
+    { 0,      NO_LED, NO_LED, 1,      2,      3,  4,      5 }, /*S0 */  \
+    { 6,      7,      8,      9,      10,     11, 12,     13}, /*S1 */  \
+    { 14,     15,     16,     NO_LED, 17,     18, 19,     20}, /*S2 */  \
+    { 21,     22,     23,     24,     25,     26, 27,     28}, /*S3 */  \
+    { 29,     30,     31,     32,     33,     34, 35,     36}, /*S4 */  \
+    { 37,     38,     39,     40,     41,     42, 43,     44}, /*S5 */  \
+    { 45,     46,     47,     48,     49,     50, 51,     52}, /*S6 */  \
+    { 53,     54,     55,     56,     57,     58, 59,     60}, /*S7 */  \
+    { 61,     62,     63,     64,     NO_LED, 65, 66,     67}, /*S8 */  \
+    { 68,     69,     70,     71,     72,     73, NO_LED, 74}, /*S9 */  \
+    { NO_LED, 75,     76,     77,     78,     79, 80,     81}  /*S10*/  \
 }, {
-    { 0, 0 }, // 0, ESC, k13
-    { 0, 15 }, // 1, ~, k16
-    { 4, 26 }, // 2, Tab, k11
-    { 5, 38 }, // 3, Caps, k21
-    { 9, 49 }, // 4, Sh_L, k00
-    { 2, 61 }, // 5, Ct_L, k06
-    { 18, 0 }, // 6, F1, k26
-    { 14, 15 }, // 7, 1, k17
-    { 22, 26 }, // 8, Q, k10
-    { 25, 38 }, // 9, A, k12
-    { 33, 49 }, // 10, Z, k14
-    { 20, 61 }, // 11, Win_L, k90
-    { 33, 0 }, // 12, F2, k36
-    { 29, 15 }, // 13, 2, k27
-    { 36, 26 }, // 14, W, k20
-    { 40, 38 }, // 15, S, k22
-    { 47, 49 }, // 16, X, k24
-    { 38, 61 }, // 17, Alt_L, k93
-    { 47, 0 }, // 18, F3, k31
-    { 43, 15 }, // 19, 3, k37
-    { 51, 26 }, // 20, E, k30
-    { 54, 38 }, // 21, D, k32
-    { 61, 49 }, // 22, C, k34
-    { 61, 0 }, // 23, F4, k33
-    { 58, 15 }, // 24, 4, k47
-    { 65, 26 }, // 25, R, k40
-    { 69, 38 }, // 26, F, k42
-    { 76, 49 }, // 27, V, k44
-    { 79, 0 }, // 28, F5, k07
-    { 72, 15 }, // 29, 5, k46
-    { 79, 26 }, // 30, T, k41
-    { 83, 38 }, // 31, G, k43
-    { 90, 49 }, // 32, B, k45
-    { 92, 61 }, // 33, SPACE, k94
-    { 94, 0 }, // 34, F6, k63
-    { 87, 15 }, // 35, 6, k56
-    { 94, 26 }, // 36, Y, k51
-    { 98, 38 }, // 37, H, k53
-    { 105, 49 }, // 38, N, k55
-    { 108, 0 }, // 39, F7, k71
-    { 101, 15 }, // 40, 7, k57
-    { 108, 26 }, // 41, U, k50
-    { 112, 38 }, // 42, J, k52
-    { 119, 49 }, // 43, M, k54
-    { 123, 0 }, // 44, F8, k76
-    { 116, 15 }, // 45, 8, k67
-    { 123, 26 }, // 46, I, k60
-    { 126, 38 }, // 47, K, k62
-    { 134, 49 }, // 48, ,, k64
-    { 145, 61 }, // 49, Alt_R, k95
-    { 141, 0 }, // 50, F9, ka6
-    { 130, 15 }, // 51, 9, k77
-    { 137, 26 }, // 52, O, k70
-    { 141, 38 }, // 53, L, k72
-    { 148, 49 }, // 54, ., k74
-    { 159, 61 }, // 55, FN, k92
-    { 155, 0 }, // 56, F10, ka7
-    { 145, 15 }, // 57, 0, k87
-    { 152, 26 }, // 58, P, k80
-    { 155, 38 }, // 59, ;, k82
-    { 163, 49 }, // 60, ?, k85
-    { 170, 0 }, // 61, F11, ka3
-    { 159, 15 }, // 62, -, k86
-    { 166, 26 }, // 63, [, k81
-    { 170, 38 }, // 64, ", k83
-    { 173, 61 }, // 65, Ct_R, k04
-    { 184, 0 }, // 66, F12, ka5
-    { 0, 8 }, // 67, LED, l01
-    { 224, 8 }, // 68, LED, l11
-    { 202, 0 }, // 69, Prt, k97
-    { 0, 15 }, // 70, LED, l02
-    { 224, 15 }, // 71, LED, l12
-    { 224, 15 }, // 72, Del, k65
-    { 0, 21 }, // 73, LED, l03
-    { 224, 21 }, // 74, LED, l13
-    { 224, 26 }, // 75, PgUp, k15
-    { 0, 28 }, // 76, LED, l04
-    { 224, 28 }, // 77, LED, l14
-    { 173, 15 }, // 78, =, k66
-    { 220, 64 }, // 79, Right, k05
-    { 0, 35 }, // 80, LED, l05
-    { 224, 35 }, // 81, LED, l15
-    { 224, 49 }, // 82, End, k75
-    { 0, 42 }, // 83, LED, l06
-    { 224, 42 }, // 84, LED, l16
-    { 195, 15 }, // 85, BSpc, ka1
-    { 224, 38 }, // 86, PgDn, k25
-    { 0, 48 }, // 87, LED, l07
-    { 224, 48 }, // 88, LED, l17
-    { 181, 26 }, // 89, ], k61
-    { 182, 49 }, // 90, Sh_R, k91
-    { 0, 55 }, // 91, LED, l08
-    { 224, 55 }, // 92, LED, l18
-    { 199, 26 }, // 93, \, ka2
-    { 206, 52 }, // 94, Up, k35
-    { 191, 64 }, // 95, Left, k03
-    { 193, 38 }, // 96, Enter, ka4
-    { 206, 64 } // 97, Down, k73
+    {17,52},{182,64},{165,64},{209,64},{8,64},{78,0},{25,27},{10,27},
+    {30,39},{6,0},{37,52},{211,27},{6,18},{18,18},{40,27},{12,39},
+    {43,39},{49,52},{211,39},{23,0},{32,18},{53,27},{49,0},{56,39},
+    {63,0},{63,52},{196,52},{36,0},{46,18},{66,27},{79,27},{70,39},
+    {83,39},{77,52},{90,52},{72,18},{59,18},{107,27},{93,27},{109,39},
+    {96,39},{115,52},{102,52},{86,18},{99,18},{120,27},{171,27},{122,39},
+    {92,0},{129,52},{211,18},{165,18},{112,18},{133,27},{105,0},{136,39},
+    {196,64},{143,52},{211,52},{119,0},{126,18},{147,27},{158,27},{150,39},
+    {162,39},{156,52},{151,18},{138,18},{25,64},{175,52},{153,64},{42,64},
+    {92,64},{140,64},{192,0},{185,18},{189,27},{162,0},{185,39},{175,0},
+    {136,0},{149,0},{0,5},{0,12},{0,19},{0,26},{0,33},{0,40},
+    {0,47},{0,54},{224,5},{224,12},{224,19},{224,26},{224,33},{224,40},
+    {224,47},{224,54},
 }, {
-    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
-    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
-    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 2, 2, 4, 2, 2,
-    4, 2, 2, 4, 4, 2, 2, 4, 2, 2, 4, 4, 2, 2, 4, 4, 2, 2, 4, 4, 4, 4, 4
+    1,1,1,1,1,4,4,1,
+    4,1,4,4,1,4,4,1,
+    4,4,4,4,4,4,4,4,
+    4,4,1,4,4,4,4,4,
+    4,4,4,4,4,4,4,4,
+    4,4,4,4,4,4,4,4,
+    4,4,4,4,4,4,4,4,
+    1,4,4,4,4,4,4,4,
+    4,4,4,4,1,1,1,1,
+    4,1,4,1,1,4,1,4,
+    4,4,2,2,2,2,2,2,
+    2,2,2,2,2,2,2,2,
+    2,2
 } };
 
 const aw_led g_aw_leds[DRIVER_LED_TOTAL] = {
-    { 0, CS1_SW1, CS2_SW1, CS3_SW1 },  //  0, ESC, k13
-    { 0, CS4_SW1, CS5_SW1, CS6_SW1 },  //  1, ~, k16
-    { 0, CS7_SW1, CS8_SW1, CS9_SW1 },  //  2, Tab, k11
-    { 0, CS10_SW1, CS11_SW1, CS12_SW1 },  //  3, Caps, k21
-    { 0, CS13_SW1, CS14_SW1, CS15_SW1 },  //  4, Sh_L, k00
-    { 0, CS16_SW1, CS17_SW1, CS18_SW1 },  //  5, Ct_L, k06
-    { 0, CS1_SW2, CS2_SW2, CS3_SW2 },  //  6, F1, k26
-    { 0, CS4_SW2, CS5_SW2, CS6_SW2 },  //  7, 1, k17
-    { 0, CS7_SW2, CS8_SW2, CS9_SW2 },  //  8, Q, k10
-    { 0, CS10_SW2, CS11_SW2, CS12_SW2 },  //  9, A, k12
-    { 0, CS13_SW2, CS14_SW2, CS15_SW2 },  //  10, Z, k14
-    { 0, CS16_SW2, CS17_SW2, CS18_SW2 },  //  11, Win_L, k90
-    { 0, CS1_SW3, CS2_SW3, CS3_SW3 },  //  12, F2, k36
-    { 0, CS4_SW3, CS5_SW3, CS6_SW3 },  //  13, 2, k27
-    { 0, CS7_SW3, CS8_SW3, CS9_SW3 },  //  14, W, k20
-    { 0, CS10_SW3, CS11_SW3, CS12_SW3 },  //  15, S, k22
-    { 0, CS13_SW3, CS14_SW3, CS15_SW3 },  //  16, X, k24
-    { 0, CS16_SW3, CS17_SW3, CS18_SW3 },  //  17, Alt_L, k93
-    { 0, CS1_SW4, CS2_SW4, CS3_SW4 },  //  18, F3, k31
-    { 0, CS4_SW4, CS5_SW4, CS6_SW4 },  //  19, 3, k37
-    { 0, CS7_SW4, CS8_SW4, CS9_SW4 },  //  20, E, k30
-    { 0, CS10_SW4, CS11_SW4, CS12_SW4 },  //  21, D, k32
-    { 0, CS13_SW4, CS14_SW4, CS15_SW4 },  //  22, C, k34
-    { 0, CS1_SW5, CS2_SW5, CS3_SW5 },  //  23, F4, k33
-    { 0, CS4_SW5, CS5_SW5, CS6_SW5 },  //  24, 4, k47
-    { 0, CS7_SW5, CS8_SW5, CS9_SW5 },  //  25, R, k40
-    { 0, CS10_SW5, CS11_SW5, CS12_SW5 },  //  26, F, k42
-    { 0, CS13_SW5, CS14_SW5, CS15_SW5 },  //  27, V, k44
-    { 0, CS1_SW6, CS2_SW6, CS3_SW6 },  //  28, F5, k07
-    { 0, CS4_SW6, CS5_SW6, CS6_SW6 },  //  29, 5, k46
-    { 0, CS7_SW6, CS8_SW6, CS9_SW6 },  //  30, T, k41
-    { 0, CS10_SW6, CS11_SW6, CS12_SW6 },  //  31, G, k43
-    { 0, CS13_SW6, CS14_SW6, CS15_SW6 },  //  32, B, k45
-    { 0, CS16_SW6, CS17_SW6, CS18_SW6 },  //  33, SPACE, k94
-    { 0, CS1_SW7, CS2_SW7, CS3_SW7 },  //  34, F6, k63
-    { 0, CS4_SW7, CS5_SW7, CS6_SW7 },  //  35, 6, k56
-    { 0, CS7_SW7, CS8_SW7, CS9_SW7 },  //  36, Y, k51
-    { 0, CS10_SW7, CS11_SW7, CS12_SW7 },  //  37, H, k53
-    { 0, CS13_SW7, CS14_SW7, CS15_SW7 },  //  38, N, k55
-    { 0, CS1_SW8, CS2_SW8, CS3_SW8 },  //  39, F7, k71
-    { 0, CS4_SW8, CS5_SW8, CS6_SW8 },  //  40, 7, k57
-    { 0, CS7_SW8, CS8_SW8, CS9_SW8 },  //  41, U, k50
-    { 0, CS10_SW8, CS11_SW8, CS12_SW8 },  //  42, J, k52
-    { 0, CS13_SW8, CS14_SW8, CS15_SW8 },  //  43, M, k54
-    { 0, CS1_SW9, CS2_SW9, CS3_SW9 },  //  44, F8, k76
-    { 0, CS4_SW9, CS5_SW9, CS6_SW9 },  //  45, 8, k67
-    { 0, CS7_SW9, CS8_SW9, CS9_SW9 },  //  46, I, k60
-    { 0, CS10_SW9, CS11_SW9, CS12_SW9 },  //  47, K, k62
-    { 0, CS13_SW9, CS14_SW9, CS15_SW9 },  //  48, ,, k64
-    { 0, CS16_SW9, CS17_SW9, CS18_SW9 },  //  49, Alt_R, k95
-    { 0, CS1_SW10, CS2_SW10, CS3_SW10 },  //  50, F9, ka6
-    { 0, CS4_SW10, CS5_SW10, CS6_SW10 },  //  51, 9, k77
-    { 0, CS7_SW10, CS8_SW10, CS9_SW10 },  //  52, O, k70
-    { 0, CS10_SW10, CS11_SW10, CS12_SW10 },  //  53, L, k72
-    { 0, CS13_SW10, CS14_SW10, CS15_SW10 },  //  54, ., k74
-    { 0, CS16_SW10, CS17_SW10, CS18_SW10 },  //  55, FN, k92
-    { 0, CS1_SW11, CS2_SW11, CS3_SW11 },  //  56, F10, ka7
-    { 0, CS4_SW11, CS5_SW11, CS6_SW11 },  //  57, 0, k87
-    { 0, CS7_SW11, CS8_SW11, CS9_SW11 },  //  58, P, k80
-    { 0, CS10_SW11, CS11_SW11, CS12_SW11 },  //  59, ;, k82
-    { 0, CS13_SW11, CS14_SW11, CS15_SW11 },  //  60, ?, k85
-    { 0, CS1_SW12, CS2_SW12, CS3_SW12 },  //  61, F11, ka3
-    { 0, CS4_SW12, CS5_SW12, CS6_SW12 },  //  62, -, k86
-    { 0, CS7_SW12, CS8_SW12, CS9_SW12 },  //  63, [, k81
-    { 0, CS10_SW12, CS11_SW12, CS12_SW12 },  //  64, ", k83
-    { 0, CS16_SW12, CS17_SW12, CS18_SW12 },  //  65, Ct_R, k04
+/* Refer to AW20216S manual for these locations
+ *   driver
+ *   |  R location
+ *   |  |          G location
+ *   |  |          |          B location
+ *   |  |          |          |                               Key       Flag    Row y-cm x-cm
+ */
+    {0, CS13_SW1,  CS14_SW1,  CS15_SW1  },  // 0 : R0-S0    //KC_LSFT   1       4   8.2  2.5
+    //                                      //     R1-S0    //KC_MUTE
+    //                                      //     R2-S0    //
+    {1, CS4_SW10,  CS5_SW10,  CS6_SW10  },  // 1 : R3-S0    //KC_LEFT   1       5   10   26
+    {0, CS16_SW12, CS17_SW12, CS18_SW12 },  // 2 : R4-S0    //KC_RCTL   1       5   10   23.7
+    {1, CS10_SW5,  CS11_SW5,  CS12_SW5  },  // 3 : R5-S0    //KC_RGHT   1       5   10   29.9
+    {0, CS16_SW1,  CS17_SW1,  CS18_SW1  },  // 4 : R6-S0    //KC_LCTL   1       5   10   1.2
+    {0, CS1_SW6,   CS2_SW6,   CS3_SW6   },  // 5 : R7-S0    //KC_F5     4       0   0    11.2
+                                                            //
+    {0, CS7_SW2,   CS8_SW2,   CS9_SW2  },   // 6 : R0-S1    //KC_Q      4       2   4.3  3.7
+    {0, CS7_SW1,   CS8_SW1,   CS9_SW1  },   // 7 : R1-S1    //KC_TAB    1       2   4.3  1.5
+    {0, CS10_SW2,  CS11_SW2,  CS12_SW2 },   // 8 : R2-S1    //KC_A      4       3   6.2  4.3
+    {0, CS1_SW1,   CS2_SW1,   CS3_SW1  },   // 9 : R3-S1    //KC_ESC    1       0   0    0.9
+    {0, CS13_SW2,  CS14_SW2,  CS15_SW2 },   //10 : R4-S1    //KC_Z      4       4   8.2  5.3
+    {1, CS4_SW4,   CS5_SW4,   CS6_SW4  },   //11 : R5-S1    //KC_PGUP   4       2   4.3  30.2
+    {0, CS4_SW1,   CS5_SW1,   CS6_SW1  },   //12 : R6-S1    //KC_GRV    1       1   2.9  0.9
+    {0, CS4_SW2,   CS5_SW2,   CS6_SW2  },   //13 : R7-S1    //KC_1      4       1   2.9  2.6
+                                                            //
+    {0, CS7_SW3,   CS8_SW3,   CS9_SW3  },   //14 : R0-S2    //KC_W      4       2   4.3  5.8
+    {0, CS10_SW1,  CS11_SW1,  CS12_SW1 },   //15 : R1-S2    //KC_CAPS   1       3   6.2  1.8
+    {0, CS10_SW3,  CS11_SW3,  CS12_SW3 },   //16 : R2-S2    //KC_S      4       3   6.2  6.2
+    //                                      //     R3-S2    //
+    {0, CS13_SW3,  CS14_SW3,  CS15_SW3 },   //17 : R4-S2    //KC_X      4       4   8.2  7.1
+    {1, CS4_SW7,   CS5_SW7,   CS6_SW7  },   //18 : R5-S2    //KC_PGDN   4       3   6.2  30.2
+    {0, CS1_SW2,   CS2_SW2,   CS3_SW2  },   //19 : R6-S2    //KC_F1     4       0   0    3.3
+    {0, CS4_SW3,   CS5_SW3,   CS6_SW3  },   //20 : R7-S2    //KC_2      4       1   2.9  4.6
+                                                            //
+    {0, CS7_SW4,   CS8_SW4,   CS9_SW4  },   //21 : R0-S3    //KC_E      4       2   4.3  7.6
+    {0, CS1_SW4,   CS2_SW4,   CS3_SW4  },   //22 : R1-S3    //KC_F3     4       0   0    7
+    {0, CS10_SW4,  CS11_SW4,  CS12_SW4 },   //23 : R2-S3    //KC_D      4       3   6.2  8
+    {0, CS1_SW5,   CS2_SW5,   CS3_SW5  },   //24 : R3-S3    //KC_F4     4       0   0    9
+    {0, CS13_SW4,  CS14_SW4,  CS15_SW4 },   //25 : R4-S3    //KC_C      4       4   8.2  9
+    {1, CS4_SW9,   CS5_SW9,   CS6_SW9  },   //26 : R5-S3    //KC_UP     1       4   8.2  28
+    {0, CS1_SW3,   CS2_SW3,   CS3_SW3  },   //27 : R6-S3    //KC_F2     4       0   0    5.2
+    {0, CS4_SW4,   CS5_SW4,   CS6_SW4  },   //28 : R7-S3    //KC_3      4       1   2.9  6.6
+                                                            //
+    {0, CS7_SW5,   CS8_SW5,   CS9_SW5  },   //29 : R0-S4    //KC_R      4       2   4.3  9.5
+    {0, CS7_SW6,   CS8_SW6,   CS9_SW6  },   //30 : R1-S4    //KC_T      4       2   4.3  11.4
+    {0, CS10_SW5,  CS11_SW5,  CS12_SW5 },   //31 : R2-S4    //KC_F      4       3   6.2  10
+    {0, CS10_SW6,  CS11_SW6,  CS12_SW6 },   //32 : R3-S4    //KC_G      4       3   6.2  11.9
+    {0, CS13_SW5,  CS14_SW5,  CS15_SW5 },   //33 : R4-S4    //KC_V      4       4   8.2  11
+    {0, CS13_SW6,  CS14_SW6,  CS15_SW6 },   //34 : R5-S4    //KC_B      4       4   8.2  12.9
+    {0, CS4_SW6,   CS5_SW6,   CS6_SW6  },   //35 : R6-S4    //KC_5      4       1   2.9  10.4
+    {0, CS4_SW5,   CS5_SW5,   CS6_SW5  },   //36 : R7-S4    //KC_4      4       1   2.9  8.5
+                                                            //
+    {0, CS7_SW8,   CS8_SW8,   CS9_SW8  },   //37 : R0-S5    //KC_U      4       2   4.3  15.3
+    {0, CS7_SW7,   CS8_SW7,   CS9_SW7  },   //38 : R1-S5    //KC_Y      4       2   4.3  13.4
+    {0, CS10_SW8,  CS11_SW8,  CS12_SW8 },   //39 : R2-S5    //KC_J      4       3   6.2  15.7
+    {0, CS10_SW7,  CS11_SW7,  CS12_SW7 },   //40 : R3-S5    //KC_H      4       3   6.2  13.8
+    {0, CS13_SW8,  CS14_SW8,  CS15_SW8 },   //41 : R4-S5    //KC_M      4       4   8.2  16.5
+    {0, CS13_SW7,  CS14_SW7,  CS15_SW7 },   //42 : R5-S5    //KC_N      4       4   8.2  14.7
+    {0, CS4_SW7,   CS5_SW7,   CS6_SW7  },   //43 : R6-S5    //KC_6      4       1   2.9  12.3
+    {0, CS4_SW8,   CS5_SW8,   CS6_SW8  },   //44 : R7-S5    //KC_7      4       1   2.9  14.2
+                                                            //
+    {0, CS7_SW9,   CS8_SW9,   CS9_SW9  },   //45 : R0-S6    //KC_I      4       2   4.3  17.2
+    {1, CS1_SW8,   CS2_SW8,   CS3_SW8  },   //46 : R1-S6    //KC_RBRC   4       2   4.3  24.5
+    {0, CS10_SW9,  CS11_SW9,  CS12_SW9 },   //47 : R2-S6    //KC_K      4       3   6.2  17.5
+    {0, CS1_SW7,   CS2_SW7,   CS3_SW7  },   //48 : R3-S6    //KC_F6     4       0   0    13.2
+    {0, CS13_SW9,  CS14_SW9,  CS15_SW9 },   //49 : R4-S6    //KC_COMM   4       4   8.2  18.5
+    {1, CS4_SW3,   CS5_SW3,   CS6_SW3  },   //50 : R5-S6    //KC_DEL    4       1   2.9  30.2
+    {1, CS1_SW5,   CS2_SW5,   CS3_SW5  },   //51 : R6-S6    //KC_EQL    4       1   2.9  23.7
+    {0, CS4_SW9,   CS5_SW9,   CS6_SW9  },   //52 : R7-S6    //KC_8      4       1   2.9  16.1
+                                                            //
+    {0, CS7_SW10,  CS8_SW10,  CS9_SW10 },   //53 : R0-S7    //KC_O      4       2   4.3  19
+    {0, CS1_SW8,   CS2_SW8,   CS3_SW8  },   //54 : R1-S7    //KC_F7     4       0   0    15.1
+    {0, CS10_SW10, CS11_SW10, CS12_SW10},   //55 : R2-S7    //KC_L      4       3   6.2  19.5
+    {1, CS4_SW11,  CS5_SW11,  CS6_SW11 },   //56 : R3-S7    //KC_DOWN   1       5   10   28
+    {0, CS13_SW10, CS14_SW10, CS15_SW10},   //57 : R4-S7    //KC_DOT    4       4   8.2  20.5
+    {1, CS4_SW6,   CS5_SW6,   CS6_SW6  },   //58 : R5-S7    //KC_END    4       4   8.2  30.2
+    {0, CS1_SW9,   CS2_SW9,   CS3_SW9  },   //59 : R6-S7    //KC_F8     4       0   0    17
+    {0, CS4_SW10,  CS5_SW10,  CS6_SW10 },   //60 : R7-S7    //KC_9      4       1   2.9  18
+                                                            //
+    {0, CS7_SW11,  CS8_SW11,  CS9_SW11 },   //61 : R0-S8    //KC_P      4       2   4.3  21
+    {0, CS7_SW12,  CS8_SW12,  CS9_SW12 },   //62 : R1-S8    //KC_LBRC   4       2   4.3  22.7
+    {0, CS10_SW11, CS11_SW11, CS12_SW11},   //63 : R2-S8    //KC_SCLN   4       3   6.2  21.5
+    {0, CS10_SW12, CS11_SW12, CS12_SW12},   //64 : R3-S8    //KC_QUOT   4       3   6.2  23.2
+    //                                      //     R4-S8    //
+    {0, CS13_SW11, CS14_SW11, CS15_SW11},   //65 : R5-S8    //KC_SLSH   4       4   8.2  22.3
+    {0, CS4_SW12,  CS5_SW12,  CS6_SW12 },   //66 : R6-S8    //KC_MINS   4       1   2.9  21.7
+    {0, CS4_SW11,  CS5_SW11,  CS6_SW11 },   //67 : R7-S8    //KC_0      4       1   2.9  19.8
+                                                            //
+    {0, CS16_SW2,  CS17_SW2,  CS18_SW2 },   //68 : R0-S9    //KC_LGUI   1       5   10   3.7
+    {1, CS4_SW8,   CS5_SW8,   CS6_SW8  },   //69 : R1-S9    //KC_RSFT   1       4   8.2  25
+    {0, CS16_SW10, CS17_SW10, CS18_SW10},   //70 : R2-S9    //MO(1)     1       5   10   21.9
+    {0, CS16_SW3,  CS17_SW3,  CS18_SW3 },   //71 : R3-S9    //KC_LALT   1       5   10   6
+    {0, CS16_SW6,  CS17_SW6,  CS18_SW6 },   //72 : R4-S9    //KC_SPC    4       5   10   13.2
+    {0, CS16_SW9,  CS17_SW9,  CS18_SW9 },   //73 : R5-S9    //KC_RALT   1       5   10   20
+    //                                      //     R6-S9    //
+    {1, CS4_SW2,   CS5_SW2,   CS6_SW2  },   //74 : R7-S9    //KC_PSCR   4       0   0    27.5
+                                                            //
+    //                                      //     R0-S10   //
+    {1, CS1_SW7,   CS2_SW7,   CS3_SW7  },   //75 : R1-S10   //KC_BSPC   1       1   2.9  26.5
+    {1, CS1_SW9,   CS2_SW9,   CS3_SW9  },   //76 : R2-S10   //KC_BSLS   1       2   4.3  27
+    {0, CS1_SW12,  CS2_SW12,  CS3_SW12 },   //77 : R3-S10   //KC_F11    4       0   0    23.2
+    {1, CS1_SW11,  CS2_SW11,  CS3_SW11 },   //78 : R4-S10   //KC_ENT    1       3   6.2  26.5
+    {1, CS1_SW1,   CS2_SW1,   CS3_SW1  },   //79 : R5-S10   //KC_F12    4       0   0    25.1
+    {0, CS1_SW10,  CS2_SW10,  CS3_SW10 },   //80 : R6-S10   //KC_F9     4       0   0    19.5
+    {0, CS1_SW11,  CS2_SW11,  CS3_SW11 },   //81 : R7-S10   //KC_F10    4       0   0    21.3
+
+    //Underglow
+    {1, CS13_SW1,  CS14_SW1,  CS15_SW1 },   //82 :          //LED1      2           0.8  0
+    {1, CS13_SW2,  CS14_SW2,  CS15_SW2 },   //83 :          //LED2      2           1.9  0
+    {1, CS13_SW3,  CS14_SW3,  CS15_SW3 },   //84 :          //LED3      2           3.0  0
+    {1, CS13_SW4,  CS14_SW4,  CS15_SW4 },   //85 :          //LED4      2           4.1  0
+    {1, CS13_SW5,  CS14_SW5,  CS15_SW5 },   //86 :          //LED5      2           5.2  0
+    {1, CS13_SW6,  CS14_SW6,  CS15_SW6 },   //87 :          //LED6      2           6.3  0
+    {1, CS13_SW7,  CS14_SW7,  CS15_SW7 },   //88 :          //LED7      2           7.4  0
+    {1, CS13_SW8,  CS14_SW8,  CS15_SW8 },   //89 :          //LED8      2           8.5  0
 
-    { 1, CS1_SW1, CS2_SW1, CS3_SW1 },  //  66, F12, ka5
-    { 1, CS13_SW1, CS14_SW1, CS15_SW1 },  //  67, LED, l01
-    { 1, CS16_SW1, CS17_SW1, CS18_SW1 },  //  68, LED, l11
-    { 1, CS4_SW2, CS5_SW2, CS6_SW2 },  //  69, Prt, k97
-    { 1, CS13_SW2, CS14_SW2, CS15_SW2 },  //  70, LED, l02
-    { 1, CS16_SW2, CS17_SW2, CS18_SW2 },  //  71, LED, l12
-    { 1, CS4_SW3, CS5_SW3, CS6_SW3 },  //  72, Del, k65
-    { 1, CS13_SW3, CS14_SW3, CS15_SW3 },  //  73, LED, l03
-    { 1, CS16_SW3, CS17_SW3, CS18_SW3 },  //  74, LED, l13
-    { 1, CS4_SW4, CS5_SW4, CS6_SW4 },  //  75, PgUp, k15
-    { 1, CS13_SW4, CS14_SW4, CS15_SW4 },  //  76, LED, l04
-    { 1, CS16_SW4, CS17_SW4, CS18_SW4 },  //  77, LED, l14
-    { 1, CS1_SW5, CS2_SW5, CS3_SW5 },  //  78, =, k66
-    { 1, CS10_SW5, CS11_SW5, CS12_SW5 },  //  79, Right, k05
-    { 1, CS13_SW5, CS14_SW5, CS15_SW5 },  //  80, LED, l05
-    { 1, CS16_SW5, CS17_SW5, CS18_SW5 },  //  81, LED, l15
-    { 1, CS4_SW6, CS5_SW6, CS6_SW6 },  //  82, End, k75
-    { 1, CS13_SW6, CS14_SW6, CS15_SW6 },  //  83, LED, l06
-    { 1, CS16_SW6, CS17_SW6, CS18_SW6 },  //  84, LED, l16
-    { 1, CS1_SW7, CS2_SW7, CS3_SW7 },  //  85, BSpc, ka1
-    { 1, CS4_SW7, CS5_SW7, CS6_SW7 },  //  86, PgDn, k25
-    { 1, CS13_SW7, CS14_SW7, CS15_SW7 },  //  87, LED, l07
-    { 1, CS16_SW7, CS17_SW7, CS18_SW7 },  //  88, LED, l17
-    { 1, CS1_SW8, CS2_SW8, CS3_SW8 },  //  89, ], k61
-    { 1, CS4_SW8, CS5_SW8, CS6_SW8 },  //  90, Sh_R, k91
-    { 1, CS13_SW8, CS14_SW8, CS15_SW8 },  //  91, LED, l08
-    { 1, CS16_SW8, CS17_SW8, CS18_SW8 },  //  92, LED, l18
-    { 1, CS1_SW9, CS2_SW9, CS3_SW9 },  //  93, \, ka2
-    { 1, CS4_SW9, CS5_SW9, CS6_SW9 },  //  94, Up, k35
-    { 1, CS4_SW10, CS5_SW10, CS6_SW10 },  //  95, Left, k03
-    { 1, CS1_SW11, CS2_SW11, CS3_SW11 },  //  96, Enter, ka4
-    { 1, CS4_SW11, CS5_SW11, CS6_SW11 },  //  97, Down, k73
+    {1, CS16_SW1,  CS17_SW1,  CS18_SW1 },   //90 :          //LED11     2           0.8  32
+    {1, CS16_SW2,  CS17_SW2,  CS18_SW2 },   //91 :          //LED12     2           1.9  32
+    {1, CS16_SW3,  CS17_SW3,  CS18_SW3 },   //92 :          //LED13     2           3.0  32
+    {1, CS16_SW4,  CS17_SW4,  CS18_SW4 },   //93 :          //LED14     2           4.1  32
+    {1, CS16_SW5,  CS17_SW5,  CS18_SW5 },   //94 :          //LED15     2           5.2  32
+    {1, CS16_SW6,  CS17_SW6,  CS18_SW6 },   //95 :          //LED16     2           6.3  32
+    {1, CS16_SW7,  CS17_SW7,  CS18_SW7 },   //96 :          //LED17     2           7.4  32
+    {1, CS16_SW8,  CS17_SW8,  CS18_SW8 },   //97 :          //LED18     2           8.5  32
 };
 #endif
diff --git a/users/accurate0/.gitignore b/users/accurate0/.gitignore
new file mode 100644
index 000000000..c6df8c013
--- /dev/null
+++ b/users/accurate0/.gitignore
@@ -0,0 +1 @@
+secrets.c
diff --git a/users/accurate0/accurate0.c b/users/accurate0/accurate0.c
new file mode 100644
index 000000000..4017acc8b
--- /dev/null
+++ b/users/accurate0/accurate0.c
@@ -0,0 +1,141 @@
+#include "accurate0.h"
+#include "calc.h"
+#include "libc.h"
+
+__attribute__ ((weak))
+bool process_record_secrets(uint16_t keycode, keyrecord_t *record) {
+    return true;
+}
+
+const qk_ucis_symbol_t ucis_symbol_table[] = UCIS_TABLE(
+    UCIS_SYM("eyes", 0x1F441, 0x1F445, 0x1F441) //👁👅👁
+);
+
+RGB caps_colour = { RGB_GREEN };
+
+void rgb_matrix_indicators_user(void) {
+    if (host_keyboard_led_state().caps_lock) {
+        // 82-89 left side light
+        for(int i = 82; i <= 89; i++) {
+            rgb_matrix_set_color(i, caps_colour.r, caps_colour.g, caps_colour.b);
+        }
+    }
+}
+
+bool raw_hid_available = false;
+uint8_t volume = 80;
+#define VOLUME 0x1
+// TODO: handle mute events :) switch colour to red ?
+void raw_hid_receive(uint8_t *data, uint8_t length) {
+    uint8_t command = data[0];
+
+    switch(command) {
+        case VOLUME:
+        {
+            raw_hid_available = true;
+            volume = data[1];
+            dprintf("%d\n", volume);
+        }
+        break;
+    }
+}
+
+bool encoder_update_user(uint8_t index, bool clockwise) {
+    switch(get_highest_layer(layer_state)) {
+        case LY_BASE:
+            if (clockwise) {
+                tap_code(KC_VOLU);
+                if(!raw_hid_available && volume < 100)
+                    volume += 2;
+            } else {
+                tap_code(KC_VOLD);
+                if(!raw_hid_available && volume > 0)
+                    volume -= 2;
+            }
+        break;
+
+        case LY_FUNC:
+            if (clockwise)
+                tap_code(KC_MNXT);
+            else
+                tap_code(KC_MPRV);
+        break;
+    }
+
+    return false;
+}
+
+void flash_and_reset(bool secrets) {
+    if(secrets)
+        SEND_STRING("qmk flash -j 4 -e SECRETS=yes" SS_TAP(X_ENTER));
+    else
+        SEND_STRING("qmk flash -j 4" SS_TAP(X_ENTER));
+
+    eeconfig_init();
+    reset_keyboard();
+}
+
+bool process_record_user(uint16_t keycode, keyrecord_t *record) {
+    if(calc_is_in_progress())
+        return calc_process_input(keycode, record);
+
+    switch(keycode) {
+        case KC_CAPS:
+            if(record->event.pressed) {
+                caps_colour.r = rand() % 255;
+                caps_colour.g = rand() % 255;
+                caps_colour.b = rand() % 255;
+                return true;
+            }
+            break;
+
+        case KC_FSH:
+            if(record->event.pressed) {
+                flash_and_reset(false);
+                return false;
+            }
+            break;
+
+        case KC_FSHS:
+            if(record->event.pressed) {
+                flash_and_reset(true);
+                return false;
+            }
+            break;
+
+        case KC_EMO:
+            if(record->event.pressed) {
+                qk_ucis_start();
+                return false;
+            }
+            break;
+
+        case KC_WPM:
+            if(record->event.pressed) {
+                uint8_t wpm = get_current_wpm();
+                static const char integer_map[] = { "0123456789" };
+
+                // int max '2147483647'
+                char buf[11] = { 0 };
+
+                for(int i = 0; wpm > 0; wpm /= 10, i++) {
+                    buf[i] = integer_map[wpm % 10];
+                }
+
+                reverse(buf);
+                send_string(buf);
+            }
+            break;
+
+        case KC_CAL:
+            if(record->event.pressed) {
+                calc_start();
+                return false;
+            }
+            break;
+    }
+
+    return process_record_secrets(keycode, record);
+}
+
+void qk_ucis_start_user(void) {}
diff --git a/users/accurate0/accurate0.h b/users/accurate0/accurate0.h
new file mode 100644
index 000000000..ec2c7f7e7
--- /dev/null
+++ b/users/accurate0/accurate0.h
@@ -0,0 +1,26 @@
+#include QMK_KEYBOARD_H
+#pragma once
+
+enum {
+    KC_EMO = SAFE_RANGE,
+    KC_WPM,
+    KC_CAL,
+    KC_FSH,
+    KC_FSHS,
+    KC_SC1,
+    KC_SC2,
+    KC_SC3,
+    KC_SC4,
+    KC_SC5,
+
+    NEW_SAFE_RANGE
+};
+
+enum Layers {
+    LY_BASE = 0,
+    LY_FUNC
+};
+
+bool process_record_user(uint16_t keycode, keyrecord_t *record);
+void qk_ucis_start_user(void);
+bool encoder_update_user(uint8_t index, bool clockwise);
diff --git a/users/accurate0/calc.c b/users/accurate0/calc.c
new file mode 100644
index 000000000..af8a20f6f
--- /dev/null
+++ b/users/accurate0/calc.c
@@ -0,0 +1,72 @@
+#include "calc.h"
+#include "print.h"
+
+calc_t calc;
+
+static uint8_t calc_keycode_to_char(uint8_t keycode, bool shift)
+{
+    if(shift) {
+        switch(keycode) {
+            case KC_8:   return '*';
+            case KC_EQL: return '+';
+        }
+    } else {
+        switch(keycode) {
+            case KC_MINS: return '-';
+            case KC_SLSH: return '/';
+            case KC_1: return '1';
+            case KC_2: return '2';
+            case KC_3: return '3';
+            case KC_4: return '4';
+            case KC_5: return '5';
+            case KC_6: return '6';
+            case KC_7: return '7';
+            case KC_8: return '8';
+            case KC_9: return '9';
+            case KC_0: return '0';
+        }
+    }
+
+    dprint("RETURNING 0");
+    return 0;
+}
+
+bool calc_is_in_progress(void) {
+    return calc.in_progress;
+}
+
+void calc_start(void) {
+    calc.in_progress = true;
+    calc.count = 0;
+}
+
+void calc_end(void) {
+    calc.in_progress = false;
+}
+
+void calc_add(uint16_t keycode, bool shift) {
+    if(keycode != KC_SPC && keycode != KC_LSHIFT && keycode != KC_RSHIFT)
+        calc.chars[calc.count++] = calc_keycode_to_char(keycode, shift);
+}
+
+void calc_evaluate(void) {
+    calc.chars[calc.count] = 0;
+    dprintf("output -> %d:%s \n", calc.count, calc.chars);
+    send_string((const char *)calc.chars);
+}
+
+bool calc_process_input(uint16_t keycode, keyrecord_t *record) {
+    if(!record->event.pressed)
+        return true;
+
+    if(keycode == KC_EQL && !(get_mods() & MOD_MASK_SHIFT)) {
+        SEND_STRING("=");
+        calc_evaluate();
+        calc_end();
+        return false;
+    }
+
+    calc_add(keycode, get_mods() & MOD_MASK_SHIFT);
+
+    return true;
+}
diff --git a/users/accurate0/calc.h b/users/accurate0/calc.h
new file mode 100644
index 000000000..3d99210c9
--- /dev/null
+++ b/users/accurate0/calc.h
@@ -0,0 +1,17 @@
+#include QMK_KEYBOARD_H
+#pragma once
+
+#define CALC_MAX 128
+
+typedef struct {
+    uint8_t  count;
+    uint8_t chars[CALC_MAX];
+    bool     in_progress : 1;
+} calc_t;
+
+void calc_start(void);
+void calc_end(void);
+void calc_evaluate(void);
+bool calc_is_in_progress(void);
+void calc_add(uint16_t keycode, bool shift);
+bool calc_process_input(uint16_t keycode, keyrecord_t *record);
diff --git a/users/accurate0/libc.c b/users/accurate0/libc.c
new file mode 100644
index 000000000..9c1c646a2
--- /dev/null
+++ b/users/accurate0/libc.c
@@ -0,0 +1,56 @@
+#include "libc.h"
+
+size_t strlen(const char *str)
+{
+    const char *p = str;
+    while(*(++p));
+
+    return p - str;
+}
+
+void reverse(char *str)
+{
+    if(!str)
+        return;
+
+
+    char *end = str + strlen(str) - 1;
+
+    while(str < end) {
+        uint8_t c = *str;
+
+        *str = *end;
+        *end = c;
+
+        str++;
+        end--;
+    }
+}
+
+// straight from musl libc
+// https://git.musl-libc.org/cgit/musl/tree/src/ctype/isdigit.c
+int isdigit(int c)
+{
+	return (unsigned)c-'0' < 10;
+}
+
+// http://git.musl-libc.org/cgit/musl/tree/src/stdlib/atoi.c
+int atoi(const char *s)
+{
+    int n=0, neg=0;
+    while (isspace(*s)) s++;
+    switch (*s) {
+        case '-': neg=1;
+        case '+': s++;
+    }
+    /* Compute n as a negative number to avoid overflow on INT_MIN */
+    while (isdigit(*s))
+        n = 10*n - (*s++ - '0');
+    return neg ? n : -n;
+}
+
+// http://git.musl-libc.org/cgit/musl/plain/src/ctype/isspace.c
+int isspace(int _c)
+{
+	return _c == ' ' || (unsigned)_c-'\t' < 5;
+}
diff --git a/users/accurate0/libc.h b/users/accurate0/libc.h
new file mode 100644
index 000000000..0f9a6cfe9
--- /dev/null
+++ b/users/accurate0/libc.h
@@ -0,0 +1,8 @@
+#include QMK_KEYBOARD_H
+#pragma once
+
+size_t strlen(const char *str);
+void reverse(char *str);
+int atoi(const char *s);
+int isdigit(int c);
+int isspace(int _c);
diff --git a/users/accurate0/rules.mk b/users/accurate0/rules.mk
new file mode 100644
index 000000000..404c21560
--- /dev/null
+++ b/users/accurate0/rules.mk
@@ -0,0 +1,14 @@
+UCIS_ENABLE = yes
+WPM_ENABLE = yes
+
+ifneq ("$(wildcard $(USER_PATH)/secrets.c)","")
+  SRC += secrets.c
+endif
+
+ifeq ($(strip $(SECRETS)), yes)
+    OPT_DEFS += -DSECRETS
+endif
+
+SRC += libc.c
+SRC += calc.c
+SRC += accurate0.c
